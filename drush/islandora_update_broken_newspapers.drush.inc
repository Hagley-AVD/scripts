<?php

/*
 * This file should be put in the islandora modules plugins directory
 * typical usage: drush -u 1 
 * 
 */

//drush hook

function islandora_update_broken_newspapers_drush_command() {
  $items = array();

  $items['islandora_update_broken_newspapers'] = array(
    'description' => "Reads a csv file first column is pid updates the MODS datastream so derivatives can be regenerated by micro services",
    'arguments' => array(
      'csv_file' => 'The path to a csv file that contains columns as described in the description.',
      'interactive' => 'if TRUE then you will be asked to confirm the update for each object',
      'action' => 'the action to do, UPDATEMODS or UPDATERELS.  The default is UPDATEMODS',
    ),
    'examples' => array(
      'drush -u 1 --uri=http://137.149.200.19/scholardev islandoraubn /var/www/html/drupal/sites/137.149.200.19.scholardev/files/csv.txt TRUE UPDATEMODS',
    ),
    'aliases' => array('islandoraubn'),
    'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_LOGIN, // we can pass in users id on the command line using drush -u.
  );

  return $items;
}

/**
 * This is the drush command specified in the array create by the drush entry point.
 * 
 * This function checks to make sure parameters are supplied and if everything is ok
 * calls the doAction function
 * 
 * @param string $query_file
 *  path to a text file that contains an itql query
 * @param boolean $interactive
 * 
 */
function drush_islandora_update_broken_newspapers($csv_file, $interactive, $action = 'UPDATEMODS') {
  drush_print('Current working directory ' . getcwd());
  if (isset($csv_file)) {
    drush_print(" using csv file" . $csv_file);
  }
  else {
    drush_print(" no csv file found");
    return;
  }


  islandora_update_newspaper_go($csv_file, $interactive, $action);
}

/**
 * Iterates through all the objects returned by the itql query and updates the mods stream
 * 
 * @param string $csv_file
 * @param boolean $interactive
 * @param string $action
 * 
 */
function islandora_update_newspaper_go($csv_file, $interactive = FALSE, $action = 'UPDATEMODS') {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  ini_set("auto_detect_line_endings", "1");

  $line_number = 0;
  $lines = file($csv_file);
  foreach ($lines as $pid) {
    $pid = trim($pid);
    if ($action == 'UPDATEMODS') {
      if ($interactive == 'TRUE') {
        if (drush_confirm(dt('update this @pid ?', array('@pid' => $pid)))) {
          //$item = new Fedora_Item($object);
          islandora_update_newspaper_page($pid);
          drush_print("processed MODS $pid # " . ++$line_number);
        }
      }
      else {
        islandora_update_newspaper_page($pid);
        drush_print("processed MODS $pid # " . ++$line_number);
      }
    }
    else {
      if ($interactive == 'TRUE') {
        if (drush_confirm(dt('update this @pid ?', array('@pid' => $pid)))) {
          //$item = new Fedora_Item($object);
          islandora_update_newspaper_rels($pid);
          drush_print("processed rels of $pid # " . ++$line_number);
        }
      }
      else {
        islandora_update_newspaper_rels($pid);
        drush_print("processed rels of $pid # " . ++$line_number);
      }
    }
  }
}

/**
 * removes the cmodel from an object and adds a new cmodel.  Currenlty
 * the cmodel is hardcoded to issueCModel. 
 * @param string $pid 
 */
function islandora_update_newspaper_rels($pid) {
  $item = islandora_object_load($pid);
  $item->relationships->remove('info:fedora/fedora-system:def/model#','hasModel');
  $item->relationships->remove("info:fedora/fedora-system:def/relations-external#",'hasModel');
  $item->relationships->add('info:fedora/fedora-system:def/model#', 'hasModel', 'islandora:issueCModel');
}

/**
 * update all the objects trigger an JMS message by rewriting the mods
 * 
 * @param string $pid
 * 
 */
function islandora_update_newspaper_page($pid) {
  $item = islandora_object_load($pid);
  drush_print('loaded item ' . $pid);
  if (!isset($item)) {
    islandora_update_write_log(dt('error loading object %pid', array('%pid' => $pid)), 'islandora_update_newspaper.log', 'error');
    unset($item);
    return;
  }

  $content = $item['MODS']->content;
  drush_print('loaded trigger stream');
  if (empty($content)) {
    unset($item);
    islandora_update_write_log(dt('error processing %pid', array('%pid' => $pid)), 'islandora_update_newspaper.log', 'error');
    return;
  }
  $item['MODS']->content = $content;

  drush_print('Set content');
  unset($item);
  time_nanosleep(0, 150000000);
}

?>