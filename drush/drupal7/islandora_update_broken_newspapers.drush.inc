<?php

/*
 * This file should be put in the islandora modules plugins directory
 * typical usage: drush -u 1 
 * 
 */

//drush hook

function islandora_update_broken_newspapers_drush_command() {
  $items = array();

  $items['islandora_update_broken_newspapers'] = array(
    'description' => "Reads a csv file first column is pid updates the MODS or DC datastream so derivatives can be regenerated by micro services.
      Currently requires Drupal7 Islandora with Tuque.  By using an action of UPDATERELS this will update the RELS-EXT datastream of the newspaper 
      object with the given cmodel and also update the newspapers pages RELS-EXT (the page level stuff [like cmodel] is currently hardcoded).  
      Each pid in the txt/csv file should represent a book or newspaper (the script looks up the pages base on the parent newspaper or book).  
      This is pretty specific to UPEI's newspapers right now)",
    'arguments' => array(
      'csv_file' => 'The path to a csv file that contains columns as described in the description.',
      'interactive' => 'if TRUE then you will be asked to confirm the update for each object',
      'action' => 'the action to do, UPDATEMODS, UPDATEDC or UPDATERELS.  The default is UPDATEMODS',
      '$cmodel' => 'the cmodel to update to, this is only used if action = UPDATERELS',
    ),
    'examples' => array(
      'drush -u 1 --uri=http://137.149.200.19/scholardev islandoraubn /var/www/html/drupal/sites/137.149.200.19.scholardev/files/csv.txt TRUE UPDATEMODS islandora:newspaperPageCModel',
    ),
    'aliases' => array('islandoraubn'),
    'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_LOGIN, // we can pass in users id on the command line using drush -u.
  );

  return $items;
}

/**
 * This is the drush command specified in the array create by the drush entry point.
 *
 * This function checks to make sure parameters are supplied and if everything is ok
 * calls the doAction function
 *
 * @param $csv_file
 * @param boolean $interactive
 * @param string $action
 * @param null $cmodel
 * @internal param string $query_file path to a text file that contains an itql query*  path to a text file that contains an itql query
 */
function drush_islandora_update_broken_newspapers($csv_file, $interactive, $action = 'UPDATEMODS', $cmodel = NULL) {
  drush_print('Current working directory ' . getcwd());
  if (isset($csv_file)) {
    drush_print(" using csv file" . $csv_file);
  }
  else {
    drush_print(" no csv file found");
    return;
  }
  islandora_update_newspaper_go($csv_file, $interactive, $action, $cmodel);
}

/**
 * Iterates through all the objects returned by the itql query and updates the mods stream
 *
 * @param string $csv_file
 * @param boolean $interactive
 * @param string $action
 * @param $cmodel
 */
function islandora_update_newspaper_go($csv_file, $interactive = FALSE, $action = 'UPDATEMODS', $cmodel) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  ini_set("auto_detect_line_endings", "1");

  $line_number = 0;
  $lines = file($csv_file);
  $count = 0;
  $dsid = ($action == 'UPDATEMODS') ? "MODS" : "DC";
  foreach ($lines as $pid) {
    $count++;
    $pid = trim($pid);
    if (!empty($pid)) {
      if ($action == 'UPDATEMODS' || $action == 'UPDATEDC') {
        if ($interactive == 'TRUE') {
          if (drush_confirm(dt('update this @pid ?', array('@pid' => $pid)))) {
            //$item = new Fedora_Item($object);
            islandora_update_newspaper_page($pid, $dsid);
            drush_print("processed MODS $pid # " . ++$line_number);
          }
        }
        else {
          islandora_update_newspaper_page($pid, $dsid);
          drush_print("processed MODS $pid # " . ++$line_number);
        }
      }
      else {
        if ($interactive == 'TRUE') {
          if (drush_confirm(dt('update this @pid ?', array('@pid' => $pid)))) {
            //$item = new Fedora_Item($object);
            islandora_update_newspaper_rels($pid, $cmodel);
            drush_print("processed rels of $pid # " . ++$line_number);
          }
        }
        else {
          islandora_update_newspaper_rels($pid, $cmodel);
          drush_print("processed rels of $pid # " . ++$line_number);
        }
      }
      if($count > 100){
        time_nanosleep(0, 500000000);
        $count = 0;
      }
    }
  }
}

/**
 * Removes the cmodel from an object and adds a new cmodel.
 *
 * @param string $pid
 * @param $cmodel
 */
function islandora_update_newspaper_rels($pid, $cmodel) {
  try{
    $object = islandora_object_load($pid);
    if (isset($cmodel)) {
      $object->relationships->remove('info:fedora/fedora-system:def/model#', 'hasModel');
      $object->relationships->remove("info:fedora/fedora-system:def/relations-external#", 'hasModel');
      $object->relationships->add('info:fedora/fedora-system:def/model#', 'hasModel', $cmodel);
    }
    $object->relationships->remove("http://islandora.ca/ontology/relsext#", 'isIssueOf');
    $object->relationships->remove('http://islandora.ca/ontology/relsext#', 'dateIssued');
    //<isIssueOf xmlns="http://islandora.ca/ontology/relsext#" rdf:resource="info:fedora/newspapers:guardian"></isIssueOf>
    $object->relationships->add("http://islandora.ca/ontology/relsext#", 'isIssueOf', 'newspapers:guardian');
    $dateIssued = islandora_drush_get_date_issued($object);
    
    $object->relationships->add('http://islandora.ca/ontology/relsext#','dateIssued', $dateIssued, RELS_TYPE_DATETIME);
    //DON"T touch pages could wrap this in a parameter check
    //$pages = islandora_basic_collection_get_objects($object);
    //islandora_drush_update_newspaper_pages($pages, $pid);
  } catch (Exception $e){
    drush_print("error creating book or newspaper object " . $e->getMessage());
  }
  unset($object);
}

function islandora_drush_get_date_issued($object){
  $mods = $object['MODS']->content;
  $modsxml = simplexml_load_string(trim($mods));
  $modsxml->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');
  $elements = $modsxml->xpath('//mods:dateIssued');
  $dateIssued = (string)$elements[0];
  return $dateIssued;
  
}

function islandora_drush_update_newspaper_pages($pages, $parent_pid) {
  $count = 0;
  foreach ($pages as $page) {
    $count++;
    //we make a big assumption here THAT sorting by title does the right thing
    //for UPEI the titles are Page 1, Page 2 etc so this works but will not work 
    //if the titles don't sort as expected.
    drush_print("processing rels of page # " . $page['object']['value']);
    $page_object = islandora_object_load($page['object']['value']);
    $pid = $page_object->id;
    $rdf_string = <<<RDF
  <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<rdf:Description rdf:about="info:fedora/$pid">
	<hasModel xmlns="info:fedora/fedora-system:def/model#" rdf:resource="info:fedora/islandora:newspaperPageCModel"></hasModel>
	<isSequenceNumber xmlns="http://islandora.ca/ontology/relsext#">$count</isSequenceNumber>
	<isMemberOf xmlns="info:fedora/fedora-system:def/relations-external#" rdf:resource="info:fedora/$parent_pid"></isMemberOf>
	<isSection xmlns="http://islandora.ca/ontology/relsext#">1</isSection>
	<isPageOf xmlns="http://islandora.ca/ontology/relsext#" rdf:resource="info:fedora/$parent_pid"></isPageOf>
  <isPageNumber xmlns="http://islandora.ca/ontology/relsext#">$count</isPageNumber>
</rdf:Description>
</rdf:RDF>
RDF;
    $page_object['RELS-EXT']->content = $rdf_string;
    unset($page_object);
  }
}

/**
 * update all the objects trigger an JMS message by rewriting the mods
 * 
 * @param string $pid
 * 
 */
function islandora_update_newspaper_page($pid, $dsid = 'MODS') {
  $item = islandora_object_load($pid);
  drush_print('loaded item ' . $pid);
  if (!isset($item)) {
    islandora_update_write_log(dt('error loading object %pid', array('%pid' => $pid)), 'islandora_update_newspaper.log', 'error');
    //unset($item);
    return;
  }

  $content = $item[$dsid]->content;
  drush_print('loaded trigger stream');
  if (empty($content)) {
    unset($item);
    islandora_update_write_log(dt('error processing %pid', array('%pid' => $pid)), 'islandora_update_newspaper.log', 'error');
    return;
  }
  $item[$dsid]->content = $content;

  drush_print('Set content');
  unset($item);
  time_nanosleep(0, 150000000);
}

?>